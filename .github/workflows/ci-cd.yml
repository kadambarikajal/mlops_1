name: DVC CI/CD Pipeline

on:
  push:
    branches:
      - main  # This triggers the pipeline when you push to the main branch
  pull_request:
    branches:
      - main  # Trigger for pull requests to the main branch

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mlflow
          pip install dvc  # Install DVC
          pip install dvc-azure  # Install the Azure plugin
          pip install flake8  # Install flake8 for linting

  linting:
    runs-on: ubuntu-latest
    needs: install  # Ensure the dependencies are installed first
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies for linting
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8

      - name: Run flake8
        run: |
          flake8 . --max-line-length=125


  training:
    runs-on: ubuntu-latest
    needs: linting
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies for model training
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mlflow
          pip install dvc
          pip install dvc-azure  # Install the Azure plugin
      - name: Install dependencies for DVC
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc
          pip install dvc-azure  # Install the Azure plugin
      - name: Set up DVC remote for AZURE
        run: |
          dvc remote add -d azureremote azure://mlops
          dvc remote modify azureremote account_name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          dvc remote modify azureremote account_key ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }}
      - name: Pull DVC data for training
        run: |
          dvc pull data/iris.csv  # Ensure iris.csv is pulled for the training stage

      - name: Run model training
        run: |
          python model_training/model.py   # Adjust the script path accordingly
  test:
    runs-on: ubuntu-latest
    needs: training  # Ensure training has been completed before testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mlflow
          pip install pytest

      - name: Run unit tests
        run: |
          pytest test/test_model.py

  build_and_push_docker:
    runs-on: ubuntu-latest
    needs: test  # Ensure that tests pass before proceeding to deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/model-api:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/model-api:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_docker  # Ensure the Docker image is built and pushed first
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy Docker container
        run: |
          docker run -d -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/model-api:latest          
